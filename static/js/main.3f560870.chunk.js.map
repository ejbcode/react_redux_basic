{"version":3,"sources":["redux/actions/actions.js","redux/types/index.js","component/Main.js","redux/reducers/loginReducer.js","redux/reducers/index.js","redux/reducers/contadorReducer.js","redux/store.js","App.js","serviceWorker.js","index.js"],"names":["type","usuario","payload","Main","state","useSelector","login","contador","dispatch","useDispatch","useState","nombre","setUsuario","onSubmit","event","preventDefault","actions","name","placeholder","value","onChange","target","onClick","initialState","usuarioLogueado","combineReducers","action","devTool","window","__REDUX_DEVTOOLS_EXTENSION__","f","store","createStore","reducer","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yPA2Be,EAzBD,WACZ,MAAO,CACLA,KCJiB,UD2BN,EAnBA,WACb,MAAO,CACLA,KCTkB,WD0BP,EAbD,SAACC,GACb,MAAO,CACLD,KCbkB,SDclBE,QAASD,IAUE,EANA,WACb,MAAO,CACLD,KCnBmB,YC2CRG,EA3CF,WACX,IAAMC,EAAQC,aAAY,SAACD,GAAD,OAAWA,EAAME,SACrCC,EAAWF,aAAY,SAACD,GAAD,OAAWA,EAAMG,YAExCC,EAAWC,cAJA,EAMaC,mBAAS,CAAEC,OAAQ,KANhC,mBAMVV,EANU,KAMDW,EANC,KAgBjB,OACE,oCACE,0BAAMC,SAXW,SAACC,GACpBA,EAAMC,iBACNP,EAASQ,EAAcf,IACvBW,EAAW,CAAED,OAAQ,OASjB,2BACEX,KAAK,OACLiB,KAAK,SACLC,YAAY,SACZC,MAAOlB,EAAQU,OACfS,SAAU,SAACN,GAAD,OACRF,EAAW,eAAGE,EAAMO,OAAOJ,KAAOH,EAAMO,OAAOF,WAGnD,4BAAQnB,KAAK,UAAb,WAEAI,EAAMH,QACN,6BACE,4BAAQqB,QAAS,kBAAMd,EAASQ,OAAhC,WACA,mCAASZ,EAAMH,QAAQU,QACvB,yCAAeJ,GACf,4BAAQe,QAAS,kBAAMd,EAASQ,OAAhC,UACA,4BAAQM,QAxBQ,WACtBd,EAASQ,OAuBH,UANc,O,cChClBO,EAAe,CAAEtB,QAAS,KAAMuB,iBAAiB,GCExCC,cAAgB,CAC7BlB,SCHa,WAA8B,IAApBH,EAAmB,uDAAX,EAAGsB,EAAQ,uCAC1C,OAAQA,EAAO1B,MACb,IJJiB,QIKf,OAAOI,EAAQ,EAEjB,IJNkB,SIOhB,OAAOA,EAAQ,EAEjB,QACE,OAAOA,IDLXE,MDFa,WAAyC,IAA/BF,EAA8B,uDAAtBmB,EAAcG,EAAQ,uCACrD,OAAQA,EAAO1B,MACb,IFFmB,UEGjB,OAAO,2BAAKI,GAAZ,IAAmBH,QAAS,KAAMuB,iBAAiB,IAErD,IFNkB,SEOhB,OAAO,2BAAKpB,GAAZ,IAAmBH,QAASyB,EAAOxB,QAASsB,iBAAiB,IAE/D,QACE,OAAOpB,MGVPuB,EACc,kBAAXC,QACwC,qBAAxCA,OAAOC,6BACVD,OAAOC,+BACP,SAACC,GAAD,OAAOA,GAIEC,EAFDC,YAAYC,EAASN,GCIpBO,MARf,WACE,OACE,kBAAC,IAAD,CAAUH,MAAOA,GACf,kBAAC,EAAD,QCIcI,QACW,cAA7BP,OAAOQ,SAASC,UAEe,UAA7BT,OAAOQ,SAASC,UAEhBT,OAAOQ,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.3f560870.chunk.js","sourcesContent":["import * as type from \"../types\";\r\n\r\nconst sumar = () => {\r\n  return {\r\n    type: type.SUMAR,\r\n  };\r\n};\r\n\r\nconst restar = () => {\r\n  return {\r\n    type: type.RESTAR,\r\n  };\r\n};\r\n\r\nconst logIn = (usuario) => {\r\n  return {\r\n    type: type.LOG_IN,\r\n    payload: usuario,\r\n  };\r\n};\r\n\r\nconst logOut = () => {\r\n  return {\r\n    type: type.LOG_OUT,\r\n  };\r\n};\r\n\r\nexport default { sumar, restar, logIn, logOut };\r\n","export const SUMAR = \"SUMAR\";\r\nexport const RESTAR = \"RESTAR\";\r\n\r\nexport const LOG_IN = \"LOG_IN\";\r\nexport const LOG_OUT = \"LOG_OUT\";\r\n","import React, { useState } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport actions from \"../redux/actions/actions\";\r\n\r\nconst Main = () => {\r\n  const state = useSelector((state) => state.login);\r\n  const contador = useSelector((state) => state.contador);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const [usuario, setUsuario] = useState({ nombre: \"\" });\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    dispatch(actions.logIn(usuario));\r\n    setUsuario({ nombre: \"\" });\r\n  };\r\n  const handleSumaClick = () => {\r\n    dispatch(actions.sumar());\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          name=\"nombre\"\r\n          placeholder=\"Nombre\"\r\n          value={usuario.nombre}\r\n          onChange={(event) =>\r\n            setUsuario({ [event.target.name]: event.target.value })\r\n          }\r\n        />\r\n        <button type=\"submit\">Log In</button>\r\n      </form>\r\n      {!state.usuario ? null : (\r\n        <div>\r\n          <button onClick={() => dispatch(actions.logOut())}>Log Out</button>\r\n          <p>Hola {state.usuario.nombre}</p>\r\n          <h2>Contador: {contador}</h2>\r\n          <button onClick={() => dispatch(actions.restar())}>Restar</button>\r\n          <button onClick={handleSumaClick}>Sumar</button>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import * as type from \"../types\";\r\n\r\nconst initialState = { usuario: null, usuarioLogueado: false };\r\n\r\nexport default function (state = initialState, action) {\r\n  switch (action.type) {\r\n    case type.LOG_OUT:\r\n      return { ...state, usuario: null, usuarioLogueado: false };\r\n\r\n    case type.LOG_IN:\r\n      return { ...state, usuario: action.payload, usuarioLogueado: true };\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport contadorReducer from \"./contadorReducer\";\r\nimport loginReducer from \"./loginReducer\";\r\n\r\nexport default combineReducers({\r\n  contador: contadorReducer,\r\n  login: loginReducer,\r\n});\r\n","import * as type from \"../types\";\r\n\r\nexport default function (state = 0, action) {\r\n  switch (action.type) {\r\n    case type.SUMAR:\r\n      return state + 1;\r\n\r\n    case type.RESTAR:\r\n      return state - 1;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { createStore } from \"redux\";\r\nimport reducer from \"./reducers\";\r\n\r\nconst devTool =\r\n  typeof window === \"object\" &&\r\n  typeof window.__REDUX_DEVTOOLS_EXTENSION__ !== \"undefined\"\r\n    ? window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    : (f) => f;\r\n\r\nconst store = createStore(reducer, devTool);\r\n\r\nexport default store;\r\n","import React from \"react\";\nimport Main from \"./component/Main\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Main />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}